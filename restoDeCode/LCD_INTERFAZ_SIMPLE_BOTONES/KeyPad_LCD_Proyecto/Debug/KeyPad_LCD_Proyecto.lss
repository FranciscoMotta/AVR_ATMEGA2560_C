
KeyPad_LCD_Proyecto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000250  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f25  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c87  00000000  00000000  000012b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000449  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00002384  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000640  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bd  00000000  00000000  00002a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002d15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e5       	ldi	r30, 0x50	; 80
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	31 d0       	rcall	.+98     	; 0x172 <main>
 110:	9d c0       	rjmp	.+314    	; 0x24c <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <modoCaracter>:

#define PRIMER_BOTON 7
#define SEGUNDO_BOTON 6

void modoCaracter (void) { //PONEMOS AL LCD EN MODO CARACTER PARA MOSTRAR EL MENSAJE
	PORTC |= (1 << RS); //PONEMOS AL PIN 0 COMO 1 
 114:	46 9a       	sbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f ed       	ldi	r24, 0xDF	; 223
 118:	9e e2       	ldi	r25, 0x2E	; 46
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <modoCaracter+0x6>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <modoCaracter+0xc>
 120:	00 00       	nop
 122:	08 95       	ret

00000124 <modoComando>:
	_delay_ms(3);
}

void modoComando (void){ //PONEMOS AL LCD EN MODO COMANDO PARA CONFIGURAR SUS CARACTERÍSTICAS
	PORTC &= ~ (1 << RS); //PONEMOS AL PIN 0 COMO 0
 124:	46 98       	cbi	0x08, 6	; 8
 126:	8f ed       	ldi	r24, 0xDF	; 223
 128:	9e e2       	ldi	r25, 0x2E	; 46
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <modoComando+0x6>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <modoComando+0xc>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <tiempoEnable>:
	_delay_ms(3);
}

void tiempoEnable (void){ //HACEMOS UNA FUNCIÓN PARA PODER CONTROLAR EL ENABLE
	PORTC |= (1 << ENABLE);
 134:	47 9a       	sbi	0x08, 7	; 8
 136:	8f e9       	ldi	r24, 0x9F	; 159
 138:	9f e0       	ldi	r25, 0x0F	; 15
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <tiempoEnable+0x6>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <tiempoEnable+0xc>
 140:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~ (1 << ENABLE);
 142:	47 98       	cbi	0x08, 7	; 8
 144:	8f e9       	ldi	r24, 0x9F	; 159
 146:	9f e0       	ldi	r25, 0x0F	; 15
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <tiempoEnable+0x14>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <tiempoEnable+0x1a>
 14e:	00 00       	nop
 150:	08 95       	ret

00000152 <posicion_Linea_Inferior>:
	_delay_ms(1);
}

void posicion_Linea_Inferior (int posicion){
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
	modoComando();
 156:	e6 df       	rcall	.-52     	; 0x124 <modoComando>
	PORTB = 0xC0 + posicion;
 158:	c0 54       	subi	r28, 0x40	; 64
	tiempoEnable();
 15a:	c5 b9       	out	0x05, r28	; 5
 15c:	eb df       	rcall	.-42     	; 0x134 <tiempoEnable>
}
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <posicion_Linea_Superior>:

void posicion_Linea_Superior (int posicion){
 162:	cf 93       	push	r28
 164:	c8 2f       	mov	r28, r24
	modoComando();
 166:	de df       	rcall	.-68     	; 0x124 <modoComando>
	PORTB = 0x80 + posicion;
 168:	c0 58       	subi	r28, 0x80	; 128
	tiempoEnable();
 16a:	c5 b9       	out	0x05, r28	; 5
 16c:	e3 df       	rcall	.-58     	; 0x134 <tiempoEnable>
}
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <main>:

int main(void)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	a3 97       	sbiw	r28, 0x23	; 35
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
	unsigned char dataConf[4] = {0x01, 0x38, 0x06, 0x0c}; //CREAMOS UN ARREGLO DE DATOS DE CONFIGURACIÓN
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	89 83       	std	Y+1, r24	; 0x01
 18a:	88 e3       	ldi	r24, 0x38	; 56
 18c:	8a 83       	std	Y+2, r24	; 0x02
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	8b 83       	std	Y+3, r24	; 0x03
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char textmat[15] = {'K','E','Y','P','A','D',' ','L','C','D',' ','K'}; //CREAMOS UN ARREGLO PARA EL MENSAJE A MOSTRAR
 196:	8e 01       	movw	r16, r28
 198:	0b 5f       	subi	r16, 0xFB	; 251
 19a:	1f 4f       	sbci	r17, 0xFF	; 255
 19c:	8f e0       	ldi	r24, 0x0F	; 15
 19e:	f8 01       	movw	r30, r16
 1a0:	11 92       	st	Z+, r1
 1a2:	8a 95       	dec	r24
 1a4:	e9 f7       	brne	.-6      	; 0x1a0 <main+0x2e>
 1a6:	8b e4       	ldi	r24, 0x4B	; 75
 1a8:	8d 83       	std	Y+5, r24	; 0x05
 1aa:	95 e4       	ldi	r25, 0x45	; 69
 1ac:	9e 83       	std	Y+6, r25	; 0x06
 1ae:	99 e5       	ldi	r25, 0x59	; 89
 1b0:	9f 83       	std	Y+7, r25	; 0x07
 1b2:	90 e5       	ldi	r25, 0x50	; 80
 1b4:	98 87       	std	Y+8, r25	; 0x08
 1b6:	91 e4       	ldi	r25, 0x41	; 65
 1b8:	99 87       	std	Y+9, r25	; 0x09
 1ba:	24 e4       	ldi	r18, 0x44	; 68
 1bc:	2a 87       	std	Y+10, r18	; 0x0a
 1be:	90 e2       	ldi	r25, 0x20	; 32
 1c0:	9b 87       	std	Y+11, r25	; 0x0b
 1c2:	3c e4       	ldi	r19, 0x4C	; 76
 1c4:	3c 87       	std	Y+12, r19	; 0x0c
 1c6:	33 e4       	ldi	r19, 0x43	; 67
 1c8:	3d 87       	std	Y+13, r19	; 0x0d
 1ca:	2e 87       	std	Y+14, r18	; 0x0e
 1cc:	9f 87       	std	Y+15, r25	; 0x0f
 1ce:	88 8b       	std	Y+16, r24	; 0x10
	unsigned char numboton[16] = {'7','8','9','%','4','5','6','x','1','2','3','-','o','0','=','+'};
 1d0:	80 e1       	ldi	r24, 0x10	; 16
 1d2:	e0 e0       	ldi	r30, 0x00	; 0
 1d4:	f2 e0       	ldi	r31, 0x02	; 2
 1d6:	de 01       	movw	r26, r28
 1d8:	54 96       	adiw	r26, 0x14	; 20
 1da:	01 90       	ld	r0, Z+
 1dc:	0d 92       	st	X+, r0
 1de:	8a 95       	dec	r24
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x68>
	int counterLocal = 0; //UN CONTADOR PARA SACAR LOS DATOS DE CADA ARREGLO
	unsigned char keyPadDataEnable = 0;
	unsigned char lectorGeneral = 0;
	DDRB = 0XFF;
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xC0;
 1e6:	80 ec       	ldi	r24, 0xC0	; 192
 1e8:	87 b9       	out	0x07, r24	; 7
    /* Replace with your application code */
    while (1) 
    {
		//CONFIGURAMOS AL LCD
		modoComando();
 1ea:	9c df       	rcall	.-200    	; 0x124 <modoComando>
 1ec:	ce 01       	movw	r24, r28
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	7c 01       	movw	r14, r24
		for (counterLocal = 0 ; counterLocal < 4 ; counterLocal++){
			PORTB = dataConf[counterLocal];
 1f2:	f7 01       	movw	r30, r14
 1f4:	81 91       	ld	r24, Z+
 1f6:	7f 01       	movw	r14, r30
			tiempoEnable();
 1f8:	85 b9       	out	0x05, r24	; 5
 1fa:	9c df       	rcall	.-200    	; 0x134 <tiempoEnable>
    /* Replace with your application code */
    while (1) 
    {
		//CONFIGURAMOS AL LCD
		modoComando();
		for (counterLocal = 0 ; counterLocal < 4 ; counterLocal++){
 1fc:	e0 16       	cp	r14, r16
 1fe:	f1 06       	cpc	r15, r17
 200:	c1 f7       	brne	.-16     	; 0x1f2 <main+0x80>
			PORTB = dataConf[counterLocal];
			tiempoEnable();
		}
		//MOSTRAMOS EL MENSAJE
		posicion_Linea_Superior(2);
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	90 e0       	ldi	r25, 0x00	; 0
		modoCaracter();
 206:	ad df       	rcall	.-166    	; 0x162 <posicion_Linea_Superior>
 208:	85 df       	rcall	.-246    	; 0x114 <modoCaracter>
 20a:	8e 01       	movw	r16, r28
 20c:	0b 5f       	subi	r16, 0xFB	; 251
 20e:	1f 4f       	sbci	r17, 0xFF	; 255
 210:	7e 01       	movw	r14, r28
 212:	f1 e1       	ldi	r31, 0x11	; 17
 214:	ef 0e       	add	r14, r31
 216:	f1 1c       	adc	r15, r1
		for ( counterLocal = 0 ; counterLocal < 12 ; counterLocal++){
			PORTB = textmat[counterLocal];
 218:	f8 01       	movw	r30, r16
 21a:	81 91       	ld	r24, Z+
 21c:	8f 01       	movw	r16, r30
			tiempoEnable();
 21e:	85 b9       	out	0x05, r24	; 5
 220:	89 df       	rcall	.-238    	; 0x134 <tiempoEnable>
			tiempoEnable();
		}
		//MOSTRAMOS EL MENSAJE
		posicion_Linea_Superior(2);
		modoCaracter();
		for ( counterLocal = 0 ; counterLocal < 12 ; counterLocal++){
 222:	0e 15       	cp	r16, r14
 224:	1f 05       	cpc	r17, r15
 226:	c1 f7       	brne	.-16     	; 0x218 <main+0xa6>
			PORTB = textmat[counterLocal];
			tiempoEnable();
		}
		while(1){
			keyPadDataEnable = PINC & 0b00010000;
			if(keyPadDataEnable){
 228:	34 9b       	sbis	0x06, 4	; 6
				lectorGeneral = PINC & 0b00001111;
 22a:	fe cf       	rjmp	.-4      	; 0x228 <main+0xb6>
				posicion_Linea_Inferior(7);
 22c:	16 b1       	in	r17, 0x06	; 6
 22e:	87 e0       	ldi	r24, 0x07	; 7
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	8f df       	rcall	.-226    	; 0x152 <posicion_Linea_Inferior>
				modoCaracter();
 234:	6f df       	rcall	.-290    	; 0x114 <modoCaracter>
 236:	1f 70       	andi	r17, 0x0F	; 15
				PORTB = numboton[lectorGeneral];
 238:	e4 e1       	ldi	r30, 0x14	; 20
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	ec 0f       	add	r30, r28
 23e:	fd 1f       	adc	r31, r29
 240:	e1 0f       	add	r30, r17
 242:	f1 1d       	adc	r31, r1
 244:	80 81       	ld	r24, Z
 246:	85 b9       	out	0x05, r24	; 5
				tiempoEnable();			
 248:	75 df       	rcall	.-278    	; 0x134 <tiempoEnable>
 24a:	ee cf       	rjmp	.-36     	; 0x228 <main+0xb6>

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
